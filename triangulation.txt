
//Печатает вектор для проверки
void print_vector(float v[2]) {
    cout << "(" << v[0] << ", " << v[1] << ")" << endl;
}
//Генерирует вектор в двумерном пространстве
void fill_vector(float v[2]) {
    v[0] = (float)rand() / (float)RAND_MAX * 100;
    v[1] = (float)rand() / (float)RAND_MAX * 100;
}

// Проверяет не! выполняется ли условие Делоне для данной точки
// и данного тркугольника
bool point_in_triangle_circle(float point[2], float triangle[3][2]) {
    // Координаты точки    
    float x = point[0];
    float y = point[1];
    // Координаты сторон треугольника   
    float xa = triangle[0][0];
    float ya = triangle[0][1];
    float xb = triangle[1][0];
    float yb = triangle[1][1];
    float xc = triangle[2][0];
    float yc = triangle[2][1];    
    
    // Ищу длины сторон треугольника   
    float ax = xb - xa;
    float ay = yb - ya;
    float bx = xc - xb;
    float by = yc - yb;
    float cx = xa - xc;
    float cy = ya - yc;
    float a = sqrt(ax * ax + ay * ay);
    float b = sqrt(bx * bx + by * by);
    float c = sqrt(cx * cx + cy * cy);
    // Полупериметр треугольника   
    float p = .5 * (a + b + c);
    float abc = a * b * c;
    float S = sqrt(p * (p - a) * (p - b) * (p - c));
    float r = abc / (4 * S);
    // Координаты центра 
    float xa2 = xa * xa;
    float ya2 = ya * ya;
    float xb2 = xb * xb;
    float yb2 = yb * yb;
    float xc2 = xc * xc;
    float yc2 = yc * yc;
    cx = -.5 * (
        (
            ya * (xb2 + yb2 - xc2 - yc2) + 
            yb * (xc2 + yc2 - xa2 - ya2) +
            yc * (xa2 + ya2 - xb2 - yb2)
        ) 
        / 
        ( 
            xa * (yb - yc) + 
            xb * (yc - ya) +
            xc * (ya - yb)
        )
    );
    cy = .5 * (
     (
            xa * (xb2 + yb2 - xc2 - yc2) + 
            xb * (xc2 + yc2 - xa2 - ya2) +
            xc * (xa2 + ya2 - xb2 - yb2)
        ) 
        / 
        ( 
            xa * (yb - yc) + 
            xb * (yc - ya) +
            xc * (ya - yb)
        )   
    );
    // Проверка на условие Делоне, растояние до центра
    // и сравнение с радиусом
    return ((x - cx) * (x - cx) + (y - cy) * (y - cy)) <= r * r;
}

// Не осознаная функция которая наверное не нужна, ищет растояние
//от точки до стороны треугольника

float distance(float point[2], float side[2][2]) {
    float x = point[0];
    float y = point[1];
    float xa = side[0][0];
    float ya = side[0][1];
    float xb = side[1][0];
    float yb = side[1][1];
    float a = ya - yb;
    float b = xb - xa;
    float c = - a * xa - b * ya ;
    float d = (abs(a * x + b * y + c))
         / 
        (sqrt(a * a + b * b));
    return d;
}

bool point_in_triangle(float point[2], float triangle[3][2]) {
    for (int i = 0; i < 3; i++) {
        if (triangle[i][0] == point[0] && triangle[i][1] == point[1]) {
            return true;
        }
    }
    return false;
}

bool side_in_triangle(float side[2][2], float triangle[3][2]) {
    if (
        point_in_triangle(side[0], triangle) &&
        point_in_triangle(side[1], triangle)
    ) {
        return true;
    } else {
        return false;
    }
}

bool is_triangle_deleted(int i, int deleted_triangles[], 
                    int num_deleted_triangles) {
    for (int j = 0; j < num_deleted_triangles; j++) {
        if (deleted_triangles[j] == i) {
            return true;
        }
    }
    return false;
}

bool keep_side(
    float triangles[][3][2], 
    int num_triangles, 
    int deleted_triangles[],
    int num_deleted_triangles, 
    float side[2][2]
) {
    for (int i = 0; i < num_triangles; i++) {
        if (side_in_triangle(side, triangles[i])) {
            if (!is_triangle_deleted(i, deleted_triangles, 
                num_deleted_triangles)
            ) {
                return true;            
            }
        }
    }
    return false;
}    

bool is_side_known(float sides[][2][2], int num_sides, float side[2][2]) {
    for (int i = 0; i < num_sides; i++) {
        if (
            (
                // start == start
                sides[i][0][0] == side[0][0] && 
                sides[i][0][1] == side[0][1] &&
                // end == end
                sides[i][1][0] == side[1][0] && 
                sides[i][1][1] == side[1][1]
            ) || (
                // start == end
                sides[i][0][0] == side[1][0] && 
                sides[i][0][1] == side[1][1] &&
                // end == start
                sides[i][1][0] == side[0][0] && 
                sides[i][1][1] == side[0][1]
            )
        ) {
            return true;
        }
    }
    return false;
}
// number of triangles 
int delete_triangle(float triangles[][3][2], int num_triangles, 
                     int k) { // k - index of deleted triangle
    for (int i = 0; i < 3; i++) { // 3 points
        for (int j = 0; j < 2; j++) { // 2 coords
            triangles[k][i][j] = triangles[num_triangles - 1][i][j]; 
        }
    }
    // T1 T2 T3 T4
    // T1 T2- T3 T4
    // T1 T4 T3 T4
    // T1 T4 T3 
    return num_triangles - 1;
}

int insert_point(int n, float triangles[][3][2], int num_triangles, float point[2]) {
    int deleted_triangles[n];
    int num_deleted_triangles = 0;
    // все стороны всех удалённых треугольников
    float sides[n * 3][2][2];
    int num_sides = 0;    
    for (int i = 0; i < num_triangles; i++) {
        if (point_in_triangle_circle(point, triangles[i])) {
            deleted_triangles[num_deleted_triangles] = i;
            num_deleted_triangles++; 
            
            // triangle is 3 points
            float a[2]; 
            a[0] = triangles[i][0][0]; 
            a[1] = triangles[i][0][1]; 
            float b[2];
            b[0] = triangles[i][1][0];
            b[1] = triangles[i][1][1];
            float c[2];
            c[0] = triangles[i][2][0];
            c[1] = triangles[i][2][1];
            
            // a b c (3 points)
            
            // side #1 (a b)
            float side_1[2][2];
            side_1[0][0] = a[0];
            side_1[0][1] = a[1];
            side_1[1][0] = b[0];
            side_1[1][1] = b[1];
            if (!is_side_known(sides, num_sides, side_1)) {
                memcpy(&sides[num_sides][0][0], &side_1[0][0], sizeof(side_1));
                num_sides++;
            }
            
            // side #2 (b c)
            float side_2[2][2];
            side_2[0][0] = b[0];
            side_2[0][1] = b[1];
            side_2[1][0] = c[0];
            side_2[1][1] = c[1];
            if (!is_side_known(sides, num_sides, side_2)) {
                memcpy(&sides[num_sides][0][0], &side_2[0][0], sizeof(side_2));
                num_sides++;
            }
            
            // side #3 (c a)
            float side_3[2][2];
            side_3[0][0] = c[0];
            side_3[0][1] = c[1];
            side_3[1][0] = a[0];
            side_3[1][1] = a[1];
            if (!is_side_known(sides, num_sides, side_3)) {
                memcpy(&sides[num_sides][0][0], &side_3[0][0], sizeof(side_3));
                num_sides++;
            }
        }
    }
    
    
    //cout << "number of deleted triangles: " << num_deleted_triangles << endl;
    //cout << "deleted triangles' indices:" << endl;
    //for (int i = 0; i < num_deleted_triangles; i++) {
    //    cout << deleted_triangles[i] << endl;
    //}
    
    //for (int i = 0; i < num_sides; i++) {
    //    print_vector(sides[i][0]);
    //    print_vector(sides[i][1]);
    //    cout << endl;
    //}
    
    //// sides -> keep_sides
    float keep_sides[n * 3][2][2];
    int num_keep_sides = 0;
    for (int i = 0; i < num_sides; i++) {        
        if (keep_side(triangles, num_triangles,
                     deleted_triangles, num_deleted_triangles, 
                     sides[i]) == true) {
            // append side to array `keep_sides`
            keep_sides[num_keep_sides][0][0] = sides[i][0][0];
            keep_sides[num_keep_sides][0][1] = sides[i][0][1];
            keep_sides[num_keep_sides][1][0] = sides[i][1][0];
            keep_sides[num_keep_sides][1][1] = sides[i][1][1];
            num_keep_sides++; 
        }
    }
    //cout << "keep sides:" << endl;
    //for (int i = 0; i < num_keep_sides; i++) {
    //    print_vector(keep_sides[i][0]);
    //    print_vector(keep_sides[i][1]);
    //    cout << endl;
    //}    
    
    //cout << "triangles:" << endl;
    //for (int i = 0; i < num_triangles; i++) {
    //    for (int j = 0; j < 3; j++) {
    //        print_vector(triangles[i][j]);
    //    }
    //    cout << endl;
    //}
    
    for (int i = 0; i < num_deleted_triangles; i++) {
        num_triangles = delete_triangle(triangles, num_triangles, deleted_triangles[i]);
    }
    
    cout << "triangles:" << endl;
    for (int i = 0; i < num_triangles; i++) {
        for (int j = 0; j < 3; j++) {
            print_vector(triangles[i][j]);
        }
        cout << endl;
    }
    
    // construt new triangles
    // using `keep_sides`
    // for each side of `keep_sides`
    //      make new triangles based on `point` + side 
    //      triangles (num_triangles)
    
    //float keep_sides[n * 3][2][2];
    //int num_keep_sides = 0;
    for (int i = 0; i < num_keep_sides; i++) {
        // new triangle - new point and one side
        float a[2];
        a[0] = point[0];
        a[1] = point[1];
        float b[2];
        b[0] = keep_sides[i][0][0];
        b[1] = keep_sides[i][0][1];
        float c[2];
        c[0] = keep_sides[i][1][0];
        c[1] = keep_sides[i][1][1];
        int j = num_triangles;
        triangles[j][0][0] = a[0];
        triangles[j][0][1] = a[1];
        triangles[j][1][0] = b[0];
        triangles[j][1][1] = b[1];
        triangles[j][2][0] = c[0];
        triangles[j][2][1] = c[1];
        num_triangles++;
    }
    
    cout << "triangles (after adding new trianges):" << endl;
    for (int i = 0; i < num_triangles; i++) {
        for (int j = 0; j < 3; j++) {
            print_vector(triangles[i][j]);
        }
        cout << endl;
        
    }    
    return num_triangles;
}
               
int main_triangle() {
    cout << boolalpha; 
    
    const int n = 10;
    float v[n][2]; // [0] - x, [1] - y
    for (int i = 0; i < n; i++) {
        fill_vector(v[i]);
        //print_vector(v[i]);
    }
    
    // x (min, max)
    float x_min = v[0][0];
    float x_max = v[0][0];
    for (int i = 0; i < n; i++) {
        if (v[i][0] < x_min) x_min = v[i][0];
        if (v[i][0] > x_max) x_max = v[i][0];
    }
    
    // y (min, max)
    float y_min = v[0][1];
    float y_max = v[0][1];
    for (int i = 0; i < n; i++) {
        if (v[i][1] < y_min) y_min = v[i][1];
        if (v[i][1] > y_max) y_max = v[i][1];
    }
    
    //cout << x_min << ' ' << x_max << endl;
    //cout << y_min << ' ' << y_max << endl;
    cout << "(" << x_min << ", " << y_min << ")" << " ";
    cout << "(" << x_max << ", " << y_min << ")" << endl;
    cout << "(" << x_min << ", " << y_max << ")" << " ";
    cout << "(" << x_max << ", " << y_max << ")" << endl;
    
    // (14, 19) ------ (95, 19)
    // |                      |
    // |          C           |
    // |                      |
    // (14, 91) ------ (95, 91)   
    
    float center[2];
    center[0] = (x_min + x_max) / 2;
    center[1] = (y_min + y_max) / 2;
    //cout << "center:" << endl;
    //print_vector(center);
    
    // n * triangles  3 * points   2 * float
    float triangles[n][3][2];
    int num_triangles = 0;
    
    triangles[0][0][0] = x_min;
    triangles[0][0][1] = y_min;
    triangles[0][1][0] = center[0];
    triangles[0][1][1] = center[1];
    triangles[0][2][0] = x_max;
    triangles[0][2][1] = y_min;
    
    triangles[1][0][0] = x_max;
    triangles[1][0][1] = y_min;
    triangles[1][1][0] = center[0];
    triangles[1][1][1] = center[1];
    triangles[1][2][0] = x_max;
    triangles[1][2][1] = y_max;
    
    triangles[2][0][0] = x_min;
    triangles[2][0][1] = y_max;
    triangles[2][1][0] = center[0];
    triangles[2][1][1] = center[1];
    triangles[2][2][0] = x_max;
    triangles[2][2][1] = y_max;
    
    triangles[3][0][0] = x_min;
    triangles[3][0][1] = y_min;
    triangles[3][1][0] = center[0];
    triangles[3][1][1] = center[1];
    triangles[3][2][0] = x_min;
    triangles[3][2][1] = y_max;
    
    num_triangles = 4;
    
    for (int i = 0; i <= 2; i++) { 
        float point[2];     
        point[0] = v[i][0]; 
        point[1] = v[i][1]; 
        cout << "point[" << i << "]: ";
        print_vector(point);
        num_triangles = insert_point(n, triangles, num_triangles, point);
    }
    return 0;
}
